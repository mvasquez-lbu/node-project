# This is a basic workflow to help you get started with Actions
name: CI-CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build_test:
    # The type of runner that the job will run on
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [14.x]
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: setup node
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # install applicaion dependencies
      - name: Install dependencies
        run: |
          npm install
          npm ci 
      # build and test the apps     
      - name: build
        run: |
          npm run build
          npm run test
  push_to_Docker_Hub:
      # The type of runner that the job will run on
      runs-on: self-hosted
      # build docker image and push to docker hub
      # only if the app build and test successfully
      needs: [build_test]

      steps:
        - name: checkout repo
          uses: actions/checkout@v2
      
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to DockerHub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
      
        - name: Build and push
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-project:latest

  deploy_to_aks:
      runs-on: self-hosted
      # build docker image and push to docker hub
      # only if the app build and test successfully
      needs: [push_to_Docker_Hub]

      steps:
             #Set Kubernetes context (Azure AKS)
        - uses: azure/aks-set-context@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}' # Azure credentials
            resource-group: 'DefaultResourceGroup-WUK'
            cluster-name: 'nodejsproject'
          id: login

        - uses: Azure/k8s-create-secret@v1
          with:
            container-registry-url: https://index.docker.io/v1/
            container-registry-username: ${{ secrets.DOCKERHUB_USERNAME }}
            container-registry-password: ${{ secrets.DOCKERHUB_TOKEN }}
            secret-name: k8s-secret

      # Deploy to Azure AKS using kubernetes
        - uses: Azure/k8s-deploy@v1
          with:
            manifests: |
              manifests/deployment.yaml
              manifests/service.yaml
            images: |
              monsvt19/nodejs-project:latest
            imagepullsecrets: |
              k8s-secret
    